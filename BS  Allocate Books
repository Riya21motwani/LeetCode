


//t.c=O((sum-maxi+1)*n)
//s.c=O(N)

//concept used if number of students are more then we are allocating less pages so we need to allocate more pages  so l=mid+1; 

int solve(vector<int>& arr, int minimumpages ){
    int n=arr.size();
    int pages=0;
    int student=1;
  for(int i=0;i<n;i++){
      if(pages+arr[i] <=minimumpages){
         pages+=arr[i];
      }
      else{
          student+=1;
          pages=arr[i];
      }
  }
  return student;
}

int maximum(vector<int>& arr){
     int n=arr.size();
    int maxi=INT_MIN;
    for(int i=0;i<n;i++){
        maxi=max(maxi,arr[i]);
    }
    return maxi;
}
int sum(vector<int>& arr){
     int n=arr.size();
    int sumi=0;
    for(int i=0;i<n;i++){
        sumi+=arr[i];
    }
    return sumi;
}


int findPages(vector<int>& arr, int n, int m) {

  if(arr.size()<m){
      return -1;
  }
    // Write your code here.
    int l=maximum(arr);
    int h=sum(arr);
      int ans=0;
    while(l<=h){

        int mid=l+(h-l)/2;
        if(solve(arr,mid)>m){
            l=mid+1;
        }
        else{
            ans=mid;
            h=mid-1;
        }
    }
    return ans;
}
