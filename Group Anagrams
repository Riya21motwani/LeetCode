class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string,vector<string> >umap; 
        vector<vector<string>> result;
        int n=strs.size();
        for(int i=0;i<n;i++){
            string temp=strs[i];
            sort(temp.begin(),temp.end());
            umap[temp].push_back(strs[i]);
        }
        for(auto it:umap){
            result.push_back(it.second);
        }
        return result;
    }
};

//time compexity: n*(k logk)
//where k is the maximum length of string and n is the size of input

//M2 
//t.c=(k+26)*n
class Solution {
public:


    string generate (string & temp){
        int arr[26]={0};
        for(char &ch:temp){
            arr[ch-'a']++;
        }

        string new_word="";
        for(int i=0;i<26;i++){
            if(arr[i]>0){
                new_word+=string(arr[i] ,i+'a');
            }
        }return new_word;
    }
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string,vector<string> >umap; 
        vector<vector<string>> result;
        int n=strs.size();
        for(int i=0;i<n;i++){
            string temp=strs[i];
            string new_word=generate(temp);
            umap[new_word].push_back(temp);

        }
        for(auto it:umap){
            result.push_back(it.second);
        }
        return result;
    }
};
