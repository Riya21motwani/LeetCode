class Solution {
public:

  int maxhouse(int ind,vector<int>& nums,vector<int>&dp){
      if(ind==0)return nums[ind];
      if(ind==1)return max( nums[0],nums[1]);
      if(dp[ind]!=-1)return dp[ind];
      int take=INT_MIN;
      if(ind>1){
           take=nums[ind]+maxhouse(ind-2,nums,dp);
      }
      int nottake=maxhouse(ind-1,nums,dp);
      return dp[ind] =max(take,nottake);
  }

    int rob(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n,-1);
        return maxhouse(n-1,nums,dp);

    }
};

//tabulation
class Solution {
public:


    int rob(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n,-1);
        dp[0]=nums[0];
        for(int i=1;i<n;i++){
             int take=nums[i];

             if(i>1){
                  take+=dp[i-2];
             }
             int nottake=dp[i-1];
             dp[i]=max(take,nottake);
        }
        return dp[n-1];

    }
};
