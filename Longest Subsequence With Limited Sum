class Solution {
public:
    vector<int> answerQueries(vector<int>& nums, vector<int>& queries) {
            int n=nums.size();
            int m=queries.size();
            vector<int>result;
            sort(nums.begin(),nums.end());
            for(auto &query:queries){
                int sum=0;
                for(int j=0;j<n;j++){
                    sum+=nums[j];
                    if(sum>query){
                        result.push_back(j);
                        break;
                    }
                    if(j==n-1){
                        result.push_back(n);
                    }
                }
            }
                return result;
    }
};


// binarysearch 
// s1:sort      s2:cummulative frequency      s3: binarysearch
class Solution {
public:

       int binarySearch(vector<int>& nums, int n, int target) {
        int l = 0, r = n-1;
        int mid;
        int result_idx = -1;
        
        while(l <= r) {
            mid = l + (r-l)/2;
            if(nums[mid] <= target) {
                result_idx = mid;
                l = mid+1;
            } else if(nums[mid] > target) {
                r = mid-1;
            }
        }
        return result_idx+1;
    }
    
    vector<int> answerQueries(vector<int>& nums, vector<int>& queries) {
        int n = nums.size();

//sort
        sort(begin(nums), end(nums));

//cummulative frequency
        for(int i = 1; i<n; i++) {
            nums[i] += nums[i-1];
        }
        
        int m = queries.size();
        vector<int> result;
        

        for(auto& it:queries){
            int cnt=binarySearch(nums,n,it);
            result.push_back(cnt);
        }
        return result;
    }
};
