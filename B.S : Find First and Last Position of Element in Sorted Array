class Solution {
public:

     int firstoccur(vector<int>& nums,int n , int target){
        int l=0;
        int h=n-1;
        int first=-1;
        while(l<=h){
            int mid=l+(h-l)/2;
            if( nums[mid]==target){
                first=mid;
                h=mid-1;
            }
            else if(nums[mid]<target){
                l=mid+1;
            }
            else{
                h=mid-1;
            }
        }
        return first;
    }



    int lastoccur(vector<int>& nums,int n , int target){
        int l=0;
        int h=n-1;
        int last=-1;
        while(l<=h){
            int mid=l+(h-l)/2;
            if( nums[mid]==target){
                last=mid;
                l=mid+1;
            }
            else if(nums[mid]<target){
                l=mid+1;
            }
            else{
                h=mid-1;
            }
        }
        return last;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        int firsto=firstoccur(nums,n,target);
        if(firsto==-1)return {-1,-1};
        int lasto=lastoccur(nums,n,target);
        return {firsto,lasto};
    }
};
